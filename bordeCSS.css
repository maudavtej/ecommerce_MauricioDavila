.uno {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
}

#b1 {
    border-radius: 30px;
    background-color: cadetblue;
    padding: 20px;
    width: 120px;
    height: 80px;
}

#b2 {
    border-radius: 30px;
    border: 3px solid fuchsia;
    padding: 20px;
    width: 120px;
    height: 80px;
}

#b3 {
    border-radius: 30px;
    background-image: url('fondo.jpg');
    background-position: center left;
    background-repeat: no-repeat;
    padding: 20px;
    width: 120px;
    height: 80px;
}

#b4 {
    border-radius: 20px 40px;
    /*podemos jugar con los bordes, asignandoles valores a las 4 esquinas, solo a dos etc, funcionara a modo de las manecillas del reloj*/
    border: solid 2px rgb(67, 74, 141);
    padding: 20px;
    width: 120px;
    height: 80px;
    font-weight: bold;
    /*font weigh acepta valores numericos y tambien valores como bold que en este caso serian negritas*/

}

#b5 {
    border-radius: 80%;
    background-color: crimson;
    padding: 20px;
    width: 120px;
    height: 80px;
    font-weight: bold;
    text-align: center;
}

#p {
    border: 20px solid yellow;
    background-color: burlywood;
    padding: 20px;
    width: 120px;
    height: 120px;
    border-image-source: url(marco.png);
    /*source define la ruta de la cual va a salir nuestra imagen*/
    border-image-slice: 25%;
    /*slice controla como se corta la imagen para crear el borde*/
    border-image-repeat: repeat;
    /*nos indica si queremos que nuestra imagen se repita alrededor del borde*/
    border-image-width: ;
    /*establece el ancho que usaremos en el borde, puede ser auto o un porcentaje*/
    border-image-outset: 50%;
    /*nos mostrara el borde fuera del contenedor*/
    border-image: url(fondo.jpg) 100 stretch;
    /*100 stretch nos ayudara a manipular de una mejor manera nuestra imagen en el borde, el 100 representa el porcentaje que queremos darle*/
}

#fondo {
    padding: 20px;
    border: 12px solid red;
    width: 340px;
    height: 280px;
    background: url(mar.jpg) top / 400px 175px no-repeat,
        url(ciudad.jpg) center /cover no-repeat;

    /*usare una manera de abreviar mi codigo  (ruta) (posicion)(dimension)no-repeat, cover nos permite tener un espacio mas limpio para que nuestros elementos convivan de una mejor manera*/
}

#degradado {
    border: 2px solid gray;
    background: linear-gradient(blue, white);
    /*usaremos linear gradient para hacer un efecto de degradado, podemos usar los colores que queramos, en este caso solo usare 2, tambien podemos usar radial gradient para dar un efecto degradado en forma circular: : tambien podemos usar repeating-radial-gradient(forma que quiero como por ejemplo circle, color1, color2), de esta manera estaria repitiendo mi degradado*/
    width: 350px;
    height: 350px;
    background: repeating-radial-gradient(circle, cyan, white 15%)
}

#degradado2 {
    border: 3px dotted rgba(255, 0, 225, 0.755);
    width: 350px;
    height: 350px;
    background: repeating-linear-gradient(90deg, pink, pink 30px, white 35px, white 40px);
    /*en el degradado 2,estamos usando un repeating linear gradient(pink: Este es el primer color del gradiente. pink 20px: Después de los primeros 20 píxeles desde el inicio, el color cambia a rosa nuevamente. white 35px: Luego, después de 35 píxeles adicionales, el color cambia a blanco. white 40px: Finalmente, después de 40 píxeles más, el color vuelve a ser blanco*/
}

.am {
    border-radius: 8%;
    font-size: 26px;
    border: 3px solid rgb(224, 93, 93);
    width: 250px;
    height: 300px;
    text-shadow: 5px 5px 15px rgba(226, 215, 220, 0.6);
    background: url(jan.jpg) center/cover;
    font: bold;
    color: aliceblue;
}

.nom {
    border-radius: 15%;
    border: 3px solid rgb(224, 93, 93);
    width: 250px;
    height: 300;
    text-shadow: 3px 3px 5px black, 0 0 25px rgb(18, 17, 17);
    font-weight: bold;
    color: rgb(241, 238, 238);
    font-size: 24px;
}

.am {
    box-shadow: 0px 20px 25px rgb(53, 52, 52), 0 25px 30px;
}

/*Box shadow y text shadow se usan para darle sombra a nuestros contenedores y a nuestros textos, el primer valor nos indicara cuantos pixeles mostrara horizontalmente , el segundo valor nos mostrara cuantos pixeles usara verticalmente y el ultimo valor nos dara un resultado mas natural de nuestras sombras, posterior a ello, elegimos el color de nuestra sombra*/

#texto {
    width: 400px;
    font-size: 40px;
    border: 3px solid red;
    writing-mode: horizontal-tb;
    /*writng mode nos ayudara a colocar el texto en vertical u horizontal*/
    white-space: nowrap;
    /* nos permite controlar cómo se manejan los espacios en blanco, saltos de línea y tabulaciones dentro de un elemento. Por defecto, los navegadores interpretan estos espacios en blanco de forma automática, pero con esta propiedad podemos modificar su comportamiento.
normal: Los espacios en blanco sobrantes y los saltos de línea se eliminan.
nowrap: Reduce espacios en blanco igual que el modo normal, pero suprime saltos de línea del origen.
pre: Secuencias de espacios son preservadas. Líneas son solo rotas en caracteres de saltos de línea encontrados en el origen y en elementos HTML <br>.
pre-wrap: Secuencias de espacio son preservadas. Líneas son rotas en caracteres de saltos de línea, en elementos HTML <br>, y agrega saltos necesarios para rellenar los cuadros de línea.
pre-line: Secuencias de espacios en blanco son reducidas. Líneas son rotas en caracteres de salto de línea, en elementos HTML <br>, y los necesarios para rellenar los cuadros de línea.
*/
    overflow: hidden;
    /*nos ayuda a controlar como se muestra el contenido que excede el contenedor, puedo usar visible, en este el contenido no se recorta y puede dibujarse fuera del contenedor. hidden para que el contenido se recorte y no se muestran barras de desplazamiento, scroll, el contenido se recorte y el navegador muestra barras de desplazamiento, y por ultimo podemos usar auto, que dependiendo del navegador, proporcionara barras de desplazamiento.*/
    text-overflow: ellipsis;
    /*clip (valor predeterminado): El texto se recorta y no es accesible.
    ellipsis: Muestra una elipsis (“…”) para representar el texto recortado1.
    string: Muestra una cadena personalizada para representar el texto recortado (aunque no todos los navegadores admiten cadenas personalizadas).*/
    padding: 15px;
    background-color: chocolate;
    font-size: 26px;
    color: aliceblue;
    font-weight: bold;
    resize: horizontal;
    /*resize nos ayudara a mostrar en una esquina una parte en la que podemos mostrar la parte del texto que no se ve*/
}

#efecto2D {
    width: 300px;
    height: 350px;
    background: repeating-radial-gradient(circle, pink, white 15%);
    border: 3px solid black;
    text-align: center;
    text-transform: capitalize;
    font-weight: bold;
    animation: skew 3s infinite;
    transform: skew(15deg);
    animation-direction: alternate;
    /*animation-direction en CSS se utiliza para definir la dirección en la que se reproduce una animación. Puede tomar varios valores:normal: Es el valor predeterminado. La animación se reproduce en orden normal (hacia adelante).
reverse: La animación se reproduce en dirección inversa (hacia atrás). alternate: La animación se reproduce primero hacia adelante y luego hacia atrás, alternando entre ambos. alternate-reverse: Similar a alternate, pero comienza hacia atras y despues hacia adelante*/
    /*varias formas de transformar elementos en el plano 2D. Aquí tienes algunas de las más comunes: skew(): Esta función permite inclinar un elemento en el plano 2D. Puedes aplicar inclinación tanto en el eje X como en el eje Y. rotate(): Rota un elemento en sentido horario o antihorario según un ángulo dado. scale(): Aumenta o disminuye el tamaño de un elemento en función de los valores proporcionados para ancho y alto.*/

}

@keyframes skew {
    0% {
        transform: skew(20deg, 20deg);
    }

    100% {
        transform: skew(-20deg, -20deg);
    }
}

#rotate {
    width: 100px;
    height: 100px;
    background: repeating-linear-gradient(27deg, red, red 10px, black 30px, white 25px);
    border: 4px dotted black;
    color: aliceblue;
    animation: rotate 2s infinite;
    transform: rotate(30deg);
    animation-direction: normal;
}

@keyframes rotate {
    0% {
        transform: rotate(180deg);
    }

    100% {
        transform: rotate(-180deg);
    }

}

#scale {
    width: 150px;
    height: 150px;
    border-radius: 20%;
    border: 4px solid blue;
    text-align: center;
    background: repeating-radial-gradient(circle, #0093E9 30%, #80D0C7 55%);
    animation: scale 3s infinite;
    transform: scale(2, 3);
    animation-direction: normal;
}

@keyframes scale {
    0% {
        transform: scale(.5, 1);
    }

    100% {
        transform: scale(-.5, -1);

    }
}

/*CUBO 3D*/
#envoltura {
    width: 300px;
    height: 300px;
    perspective: 700px;
    margin: 100px auto;
    border: 3px solid black;
    display: -ms-flexbox;
    background: black;
}

.cubo {
    position: relative;
    width: 150px;
    height: 150px;
    transform-style: preserve-3d;
    transition: 2s ease;


    ;
}

.cubo:hover {
    transform: rotate3d(.5, 1, 1, -270deg);
}

.cubo div {
    position: absolute;
    width: 150px;
    height: 150px;
    background: black;
}

.cubo div:nth-child(1) {
    transform: translateZ(75px);
    background: rgb(0, 0, 0);
}

.cubo div:nth-child(2) {
    transform: rotateX(180deg) translateZ(75px);
    background: rgb(213, 28, 213);
}

.cubo div:nth-child(3) {
    transform: rotateY(-90deg) translateZ(75px);
    background: rgb(28, 221, 21);
}

.cubo div:nth-child(4) {
    transform: rotateY(90deg) translateZ(75px);
    background: rgb(245, 234, 32);
}

.cubo div:nth-child(5) {
    transform: rotateX(90deg) translateZ(75px);
    background: rgb(26, 168, 244);
}

.cubo div:nth-child(6) {
    transform: rotateX(-90deg) translateZ(75px);
    background: rgb(230, 37, 37);
}

/*TRANSICION DE MEDIA VUELTA DESPUES DEL HOVER*/
#transicion {
    width: 125px;
    height: 125px;
    background: violet;
    border-radius: 50%;
    transition: all 1s;
    transition-timing-function: ease;
    backface-visibility: hidden;
    position: relative;

}

#letras-escondidas {
    visibility: hidden;
    text-align: center;
    white-space: nowrap;
    text-transform: capitalize;
    font-weight: bold;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

#transicion:hover {
    background: #0093E9;
    transform: scaleY(-1);

}

#letras-escondidas:hover {
    visibility: visible;

}

#transicion2 {
    width: 50px;
    height: 50px;
    background: #28efd8;
    animation: mover-derecha 2s ease 1s infinite normal both;
    /*animation: name duration timing-function delay iteration-count direction fill-mode;*/
}

/*@keyframes mover-derecha {
    0% {
        transform: translateX(0px);
    }

    25% {
        transform: translateX(200px);
        background: cornflowerblue;
    }

    50% {
        transform: translateY(200px) translateX(200px);
    }

    75% {
        transform: translateX(0px) translateY(200px);
        background: yellow;
    }

    100% {
        transform: translateY();
    }
}*/

.caja {
    width: 350px;
    height: 350px;
    border: 2px solid black;
    display: grid;
    place-items: center;


}

.horizontal {

    border-radius: 3%;
    background: linear-gradient(rgb(95, 171, 237) 75%, orange 25%);
    display: flex;
    font-size: 14px;
    margin: 15px;
    padding: 15px;
    font-weight: bold;
    writing-mode: horizontal-tb;
    inset: 150px;



    margin-left: auto;


}

.vertical {


    border-radius: 15px;
    background: linear-gradient(red 30%, rgb(106, 106, 226));
    display: inline-block;
    writing-mode: vertical-lr;




}

h2 {
    font-size: 16px;
}

/*TEXTO QUE APARECE DESPUES DEL HOVER*/
.visible {
    background: black;
    border-radius: 2%;
    font-size: 18px;
    font-weight: bold;
    display: inline-block;
    color: white;
    position: relative;
    margin: 100px;
    padding: 15px 32px;
}

.visible .invisible {
    color: black;
    font-size: 16px;
    position: absolute;
    background: rgb(219, 76, 76);
    visibility: hidden;
    display: inline-block;
    z-index: 1;
    border-radius: 2px 2px 2px -1px;
    padding: 3px;
    margin-left: 2px;
    bottom: 70%;
    right: -45%;
    font-weight: bold;
    transition: opacity 0.3s ease;
    opacity: 0;

}

.visible:hover .invisible {
    visibility: visible;
    transition-delay: 0.2s;
    opacity: 1;

}

/*TARJETAS CON HOVER INTERACRIVAS*/
img {
    width: 100%;
    border-radius: 3px 3px 0 0;

}

.Imagen {
    opacity: 1;
    display: block;
    width: 100%;
    height: auto;
    transition: .5s ease;
    backface-visibility: hidden;
}

.city {
    width: 40%;
    position: relative;

    border-radius: 20px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);

    animation: ease 1s;
    margin: 90px;

}

.texto {
    text-align: center;
    font-weight: bold;
    padding: 0.3px;
    background-size: cover;
    font-size: 36px;


}

.nombre {
    transition: .5s ease;
    opacity: 0;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-weight: bolder;
    font-size: 30px;
    color: rgb(5, 4, 4);

}

.city:hover .Imagen {
    opacity: 0.5;
}

.city:hover .nombre {
    opacity: 1;
}

/*paginacion*/
.paginacion {
    border-radius: 15px;
    border: 3px solid rgb(235, 130, 151);
    background: rgb(242, 234, 236);
    display: inline-block;
    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
    font-weight: bolder;
    padding: 5px;
    margin: 10px;

}

.paginacion a {
    text-decoration: none;
    display: inline-block;
    transition: transform 0.3s ease;
    color: black;


}

.paginacion a:hover {
    background-color: rgb(227, 158, 133);
    color: white;
    transform: translateY(-10px);
}